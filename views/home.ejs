<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script  src="/socket.io/socket.io.js"></script>
    <title>Web Chat</title>
</head>
<body>
    <h1>Web Chat</h1>

    <ul id="nick">

    </ul>

    <ul id="messages">
        <% allMessages.forEach(({message, nickname, timestamp}) => { %>
            <li data-testid="message"> <%= `${timestamp} - ${nickname}: ${message}` %> </li>
      <% } ) %>  
    </ul>
    <form action="">
      <input data-testid="nickname-box" id="name" placeholder="Digite seu nome"  />
      <button id="nickName" data-testid="nickname-button">Nickname</button>
      <input data-testid="message-box" id="messageInput" autocomplete="off" />
      <button data-testid="send-button">Enviar</button>
    </form>
    

    
    
</body>
<script>
    const socket = io();
    
    const form = document.querySelector('form');
    const inputMessage = document.querySelector('#messageInput');
    const inputName = document.querySelector('#name');
    const ulMessage = document.querySelector('#messages');
    const buttonName = document.querySelector('#nickName');
    const usersList = document.querySelector('#nick');

    const aleatoreNick = () => {
    let nick = '';
    const str = 'abcdefghijklmnopqrstuvwyz';
    for (let index = 0; index < 16; index += 1) {
      nick += str[(Math.floor(Math.random() * str.length))];
    }
    return nick;
  };
  

  
  
  
  let nickName = aleatoreNick(); 
  

  const displayUsers = (connectedUsers) => {
  usersList.innerHTML = '';

  connectedUsers.forEach((user) => {
    const currentUser = nickName;
    const newUser = document.createElement('li');

    newUser.setAttribute('data-testid', 'online-user');
    // newUser.setAttribute('class', 'online-user');
    newUser.innerText = user;

    if (currentUser === user) {
      usersList.prepend(newUser);
    } else {
      usersList.appendChild(newUser);
    }
  });
};
  
    socket.emit('updateNick', nickName);
    socket.on('users', (ele) => {
   displayUsers(ele)
    })



    // button nickName
    buttonName.addEventListener('click', (e) => {
        e.preventDefault();
        socket.emit('updateNick', inputName.value);
        nickName = inputName.value;
    })

//    button message

    form.addEventListener('submit', (e) => {
  e.preventDefault();
  socket.emit('message', {chatMessage: inputMessage.value, nickname: nickName});
  inputMessage.value = '';
  return false;
});

//  render li message
 
const renderLi = (message) => {
    const li = document.createElement('li');
    li.innerText = message; 
    li.setAttribute('data-testid',  'message');
    ulMessage.appendChild(li);
}

socket.on('message', (message) =>  renderLi(message) )









</script>

<style>
     body {
    font: 25px Helvetica, Arial;
  }
  
  form {
    border: 1px solid black;
    padding: 3px;
    position: fixed;
    bottom: 0;
    width: 100%;
  }
  
  form input {
    padding: 10px;
    width: 90%;
    margin-right: 0.5%;
    font-size: 30px;
  }
  
  form button {
    width: 20%;
    background: rgb(83, 85, 85);
    border: none;
    padding: 10px;
    cursor: pointer;
    font-size: 30px;
  }
  
  #messages {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
  
  #messages li {
    padding: 5px 10px;
  }
  
  #messages li:nth-child(odd) {
    background: #eee;
  }
 

</style>
</html>